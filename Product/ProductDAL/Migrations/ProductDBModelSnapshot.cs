// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductDAL;

namespace ProductDAL.Migrations
{
    [DbContext(typeof(ProductDB))]
    partial class ProductDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ProductEntity.Article", b =>
                {
                    b.Property<Guid>("articleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("articleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("colourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("articleId");

                    b.HasIndex("colourID");

                    b.HasIndex("productId");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("ProductEntity.Colour", b =>
                {
                    b.Property<Guid>("colourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("colourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("colourName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("colourID");

                    b.ToTable("colours");
                });

            modelBuilder.Entity("ProductEntity.Product", b =>
                {
                    b.Property<Guid>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("channelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productYear")
                        .HasColumnType("int");

                    b.Property<Guid>("sizScaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("productId");

                    b.HasIndex("sizScaleId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ProductEntity.SizeScale", b =>
                {
                    b.Property<Guid>("sizScaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("sizeScaleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("sizScaleId");

                    b.ToTable("sizeScales");
                });

            modelBuilder.Entity("ProductEntity.Article", b =>
                {
                    b.HasOne("ProductEntity.Colour", "Colour")
                        .WithMany()
                        .HasForeignKey("colourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductEntity.Product", null)
                        .WithMany("articles")
                        .HasForeignKey("productId");

                    b.Navigation("Colour");
                });

            modelBuilder.Entity("ProductEntity.Product", b =>
                {
                    b.HasOne("ProductEntity.SizeScale", "SizeScale")
                        .WithMany()
                        .HasForeignKey("sizScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SizeScale");
                });

            modelBuilder.Entity("ProductEntity.Product", b =>
                {
                    b.Navigation("articles");
                });
#pragma warning restore 612, 618
        }
    }
}
